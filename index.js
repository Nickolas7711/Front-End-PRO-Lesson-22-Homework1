let userData = {
    'USD': 1000,
    'EUR': 900,
    'UAH': 15000,
    'BIF': 20000,
    'AOA': 100
};

let bankData = {
    'USD': {
        max: 3000,
        min: 100,
        img: 'üíµ'
    },
    'EUR': {
        max: 1000,
        min: 50,
        img: 'üí∂'
    },
    'UAH': {
        max: 0,
        min: 0,
        img: 'üí¥'
    },
    'GBP': {
        max: 10000,
        min: 100,
        img: 'üí∑'
    }
};

function getUserInput(message) {
    return new Promise(resolve => {
        const userInput = confirm(message);
        resolve(userInput);
    });
}

function getCurrencyBalance(userData) {
    const availableCurrencies = Object.keys(userData);
    return new Promise((resolve, reject) => {
        function requestCurrency() {
            let currency = prompt(`–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞–ª—é—Ç–∏ (${availableCurrencies.join(', ')}):`);
            if (currency === null) {
            reject('–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –≤–∞–ª—é—Ç–∏.');
            } else {
                currency = currency.toUpperCase();
                if (userData.hasOwnProperty(currency)) {
                    resolve(currency);
                } else {
                    console.log('–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –≤–∞–ª—é—Ç–∞.');
                    requestCurrency();
                }
            }
        }
        requestCurrency();
    });
}

function getAmountForWithdrawal(currency, bankData) {
    return new Promise((resolve, reject) => {
        const maxAmount = bankData[currency].max;
        const minAmount = bankData[currency].min;
        let amount = parseFloat(prompt(`–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –∑–Ω—è—Ç—Ç—è (${currency}):`));

        if (isNaN(amount) || amount < minAmount) {
            reject(`–í–≤–µ–¥–µ–Ω–∞ —Å—É–º–∞ –º–µ–Ω—à–∞ –∑–∞ –¥–æ–ø—É—Å—Ç–∏–º–∏–π –º—ñ–Ω—ñ–º—É–º. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è: ${minAmount}`);
        } else if (amount > maxAmount) {
            reject(`–í–≤–µ–¥–µ–Ω–∞ —Å—É–º–∞ –ø–µ—Ä–µ–≤–∏—â—É—î –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –º–∞–∫—Å–∏–º—É–º. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏–≤–æ–¥—É: ${maxAmount}`);
        } else {
            resolve(amount);
        }
    });
}

async function getMoney(userData, bankData) {
    const mssCurrencyNotAvailable = '–í–∞–ª—é—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è —É –±–∞–Ω–∫–æ–º–∞—Ç—ñ.';

    try {
        const isViewBalance = await getUserInput('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç–∏?');
        if (isViewBalance) {
            const currency = await getCurrencyBalance(userData, bankData);
            console.log(`–ë–∞–ª–∞–Ω—Å: ${userData[currency]} ${currency}`);
        } else {
            const currency = await getCurrencyBalance(userData, bankData);
            try {
                if (bankData.hasOwnProperty(currency)) {
                    const amount = await getAmountForWithdrawal(currency, bankData);
                    userData[currency] -= amount;
                    console.log(`–û—Å—å –≤–∞—à–∞ –≥–æ—Ç—ñ–≤–∫–∞: ${amount} ${currency} ${bankData[currency].img}`);
                } else {
                    console.log(mssCurrencyNotAvailable);
                }
            } catch (err) {
                console.log(err);
            }
        } 
    } catch (err) {
        console.log(err);
    } finally {
        console.log('–î—è–∫—É—î–º–æ, –≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üòä');
    }
}

getMoney(userData, bankData);